{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\fnil\fcharset0 Verdana;
\f3\froman\fcharset0 Times-Roman;\f4\fnil\fcharset0 LucidaGrande;\f5\fswiss\fcharset0 ArialMT;
}
{\colortbl;\red255\green255\blue255;\red45\green5\blue21;\red100\green14\blue47;\red67\green10\blue31;
\red96\green23\blue68;\red230\green46\blue37;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid3\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid4\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid5\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid6\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid7\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid8\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid9\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li6480\lin6480 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid10\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li7200\lin7200 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid11\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li7920\lin7920 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid12\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li8640\lin8640 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid203\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid204\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid205\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li3600\lin3600 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh16520\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \
\

\f1\b\fs48 \ul \
\
\
\
\
Nebenl\'e4ufige Programmierung
\f0\b0\fs24 \ulnone \
\
\
\
\
\
\
\
\
\
\
\
\
\

\f1\b\fs28 \ul Prozesse:
\fs24 \cf2 \ulnone  \

\f0 \

\f1\b0\fs26 Bei vielen Programmierprojekten gibt es Aufgaben, die gleichzeitig erf\'fcllt werden m\'fcssen.\
Server m\'fcssen mehrere Anfragen gleichzeitig bearbeiten k\'f6nnen.\
Prozesse k\'f6nnen quasi parallel ausgef\'fchrt werden, d.h. dass das Betriebssystem die parallele Ausf\'fchrung simuliert, indem die Prozesse gewechselt werden, ohne dass der Benutzer dies bemerkt.\
Jeder Prozess hat : 	- sein eigenes Code- Segment\
				- einen eigenen Stack\
\cf0 Ein Prozess setzt sich aus dem: Programmcode und vom Betriebssystem gesch\'fctzten Adressbereich, der ausschlie\'dflich dem Prozess zugeordnet ist zusammen.\
Somit kann ein Prozess P1 nicht auf den Adressraum eines zweiten Prozesses P2 zugreifen.\
Prozesse sind also schwergewichtig: 	- der Kontextwechsel ist aufwendig \
							- die Interprozesskommunikation ist schwierig, weil der Speicherbereich zwischen Prozessen auf dem selben Computer strikt voneinander getrennt sind.\
\
\ul Anschauliches Beispiel von Prozessen:\ulnone \
\pard\pardeftab720

\f2 \cf0 \
                       
\f0\fs24 {{\NeXTGraphic page1image16168.png \width4494 \height1730 \noorient
}¬}
\f2\fs26 \
\
\
\
\pard\tx9840\pardeftab720

\f1\b\fs28 \cf0 \ul \ulc0 Threads:\

\b0\fs26 \
\pard\tx9840\pardeftab720
\ls1\ilvl0\cf0 \ulnone - Threads (engl. f\'fcr Faden, Strang) werden von Prozessen erzeugt und laufen in deren Adressraum  \
- K\'f6nnte man als \'82leichtgewichtig\'92 bezeichnen: - Interthreadkommunikation ist einfacher, weil verschiedene Threads jeweils auf die Daten der anderen Threads im selben Proze\'df zugreifen k\'f6nnen. \
\pard\tx5180\tx6180\tx6180\tx8640\tx9840\pardeftab720\li8640\fi-8640
\ls1\ilvl11\cf0    	-Threadwechsel also schneller als Proze\'dfwechsel\
\pard\tx9840\pardeftab720
\ls1\ilvl0\cf0 - Thread hat seinen eigenen Stack und damit insbesondere seine eigenen lokalen Variablen.\
- Es ist so, als ob mehrere Prozesse im gleichen Programm laufen.\
\pard\tx566\pardeftab720\sa320
\cf0 \
\ul Anschauliches Bespiel von Prozessen & Threads:\ulnone \
\pard\pardeftab720

\f3\fs24 \cf0  
\f0 {{\NeXTGraphic page1image16600.png \width5237 \height2329 \noorient
}¬}
\f3 \
\
\
\
\
\pard\pardeftab720

\f1\b\fs28 \cf0 \ul Scheduling und Zust\'e4nde von Threads:
\b0\fs24 \ulnone \
\

\fs26 Auch bei der Thread- Programmierung ist ein Scheduler entweder in der Thread- Bibliothek oder in dem Betriebssystem vorhanden, der bestimmt, wann welcher Thread Prozessorzeit erh\'e4lt.\
Hier kann die Zuteilung wie bei den Prozessen priorit\'e4ts- und zeitgesteuert erfolgen.\
\ul 	zeitgesteuerte Threads:\ulnone  jedem Thread wird eine bestimmte Zeit zur Verf\'fcgung gestellt, ehe dieser automatisch unterbrochen wird und anschlie\'dfend ein anderer Thread an der Reihe ist.\
\ul 	priorit\'e4tsgesteuerte Therads:\ulnone  der Thread erh\'e4lt mit der h\'f6chsten Priorit\'e4t vom Scheduler den Zuschlag. Au\'dferdem wird ein laufender Thread abgebrochen, wenn ein Thread mit einer h\'f6heren Priorit\'e4t ausgef\'fchrt wird.\
Also:\
Der sogenannte Scheduler vergibt CPU-Rechenzeit an die konkurrierenden Threads. \
Ein Thread l\'e4uft so lange, bis er\
	- die CPU freiwillig abgibt oder\uc0\u8232 	- blockiert ist oder\u8232 	- durch einen anderen Thread verdr\'e4ngt wird\
\
\ul Anschauliches Beispiel
\fs32 \ulnone \
\pard\pardeftab720\sa240

\f0\fs24 \cf0 {{\NeXTGraphic Kap10-003.htm.gif \width6820 \height3240
}¬}\pard\pardeftab720\sa240
\cf0 {{\NeXTGraphic page2image11880.png \width5311 \height5271 \noorient
}¬}\pard\pardeftab720\sa240

\f1\fs32 \cf0 \
\pard\pardeftab720

\f3\fs24 \cf0 \
\pard\pardeftab720

\f1\fs26 \cf0 \ul Ein Thread befindet sich immer in einem der folgenden Zust\'e4nde:\ulnone \
		\cf3 new/ Thrad erzeugt\cf0 : Der Thread ist erzeugt, ist aber noch nicht gestartet\
\pard\pardeftab720
\cf2 		ready-to-run/ Thread bereit\cf0 : Der Thread ist laufbereit und konkurriert mit anderen Threads um die Zuteilung der CPU\
\cf4 		blocked/ Thread wird blockiert\cf0 : Der Thread ist blockiert, weil er entweder eine I/O-Operation angesto\'dfen hat, sich freiwillig blockiert oder erfolglos synchronisierten Code ausf\'fchren wollte\
\cf4 		running/ Thread in Ausf\'fchrung\cf0 : Der Thread hat die CPU vom Scheduler zugewiesen bekommen und wird ausgef\'fchrt\
\cf4 		dead/ Thread wird beendet\cf0 : Der Thread hat entweder seinen Programmcode komplett abgearbeitet oder wurde anderweitig beendet. Der Thread kann nicht wieder gestartet werden. Auf die Methoden und Attribute kann jedoch weiterhin zugegriffen 						   werden\
\pard\pardeftab720

\f3\fs24 \cf0 \
\
\
\pard\pardeftab720\sa240

\f1\b\fs28 \cf0 \ul Threads in Java:
\f3\b0\fs24 \ulnone \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0
\f1\fs26 \cf0 1. Threads m\'fcssen mit der Methode run() implementiert werden\
2. Threads werden durch Aufruf der Methode start() nebenl\'e4ufig gestartet\
3. Mit start() \'fcberf\'fchren wir den Thread in eine Konkurrenz mit anderen Therads\uc0\u8232 \
Es gibt in Java zwei M\'f6glichkeiten, Threads zu erstellen: \
\pard\pardeftab720
\cf0 \ul 	1. Ableitung der nebenl\'e4ufigen Klasse von der Klasse Thread\
\ulnone \
\pard\pardeftab720
\cf5 	public class \cf0 MyThread \cf5 extends \cf0 Thread\
		Vorteil:\
\pard\tx3100\tx3600\pardeftab720\li3600\fi-3600
\ls3\ilvl4\cf0 {\listtext	
\f4 \uc0\u8259 
\f1 	}Alle Thread-Methoden k\'f6nnen direkt genutzt werden \
{\listtext	
\f4 \uc0\u8259 
\f1 	}Erzeugung einfacher: \uc0\u8232 	MyThread t1 = \cf5 new \cf0 MyThread(); t1.start(); \uc0\u8232 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls3\ilvl1\cf0 		Nachteil: \
\pard\pardeftab720
\cf0 				-  In Java ist keine Mehrfachvererbung m\'f6glich. Eine von Thread abgeleitete Klasse kann nicht zus\'e4tzlich von einer anderen Klasse erben\
\
	\ul 2. Implementierung der Schnittstelle Runnable \ulnone \
\
	\cf5 public class \cf0 MyThread \cf5 implements \cf0 Runnable\
		Threads werden gestartet, indem ein neues Thread-Objekt erzeugt wird, dem im Konstruktor als Parameter eine Referenz auf das Runnable-Objekt \'fcbergeben wird:\
	Thread t1 = \cf5 new \cf0 Thread( \cf5 new \cf0 MyThread() ); \
		Vorteil:\
				\'95 Ableiten von anderen Basisklassen m\'f6glich\
		Nachteil:\uc0\u8232 				\'95 Thread-Methoden sind aufwendiger zu verwenden. Um eine Thread-Methode aufrufen zu k\'f6nnen, muss zun\'e4chst eine Referenz auf den aktuell ausf\'fchrenden Thread durch Aufruf der statischen Methode\
					Thread.currentThread()\
				erlangt werden.\
\pard\pardeftab720\sa240

\fs32 \cf0 \
\pard\pardeftab720\sa240

\f3\fs24 \cf0 \
\pard\pardeftab720
\cf0 \
\pard\pardeftab720\sa240

\f1\b\fs28 \cf0 \ul Beispiel zur Erzeugung von Threads durch Erweiterung der Klasse Thread:
\f3\b0\fs24 \ulnone \
\pard\pardeftab720

\f1\fs26 \cf0 \
public class MyThread extends Thread \{\
\pard\pardeftab720

\f0\fs24 \cf0 {{\NeXTGraphic page4image4576.png \width112 \height225 \noorient
}¬}\pard\pardeftab720

\f1\fs26 \cf0 \
	private String text;\
	public MyThread( String text )\{\
		this.text = text;\
	\}\
	public void run()\{\
		for( int i = 0; i < 10; i++ )\{\
			System.out.println(text);    //Rechenzeit verbrauchen\
			for( int j = 0; j < 100000; j++ )\{\
				double f = Math.sqrt(Math.exp(4545534.4 / 898997));\
			\}\
		\}\
	\}\
\pard\pardeftab720

\f0\fs24 \cf0 {{\NeXTGraphic page4image20728.png \width112 \height225 \noorient
}¬}\pard\pardeftab720

\f1\fs26 \cf0 \
\}\
public class MyMain \{\
\pard\pardeftab720

\f0\fs24 \cf0 {{\NeXTGraphic page4image22568.png \width112 \height225 \noorient
}¬}\pard\pardeftab720

\f1\fs26 \cf0 	public static void main(String[] args)\{\
		MyThread t1 = new MyThread("Thread1");\
		MyThread t2 = new MyThread(" Thread2");\
		t1.start(); t2.start();\
	\}\
\}
\f5\i\b\fs38 \
\pard\pardeftab720\sa240
\cf0 \
\pard\pardeftab720\sa240

\f1\i0\fs28 \cf0 \ul Deadlocks:\
\pard\pardeftab720

\b0\fs26 \cf0 Problemstellung: \ulnone \
\
Eine \cf6 Verklemmung \cf0 (Deadlock) kann wie folgt definiert werden:\
	Eine Menge von Prozessen sperren sich gegenseitig, wenn jeder Prozess der Menge auf ein Ereignis wartet, das nur durch einen anderen Prozess der Menge ausgel\'f6st werden kann.\
\
Da alle am Deadlock beteiligten Prozesse warten, kann keiner ein Ereignis ausl\'f6sen, so dass ein anderer geweckt wird. Also warten alle beteiligten Prozesse ewig.\
\
\
\ul Anschauliches Bespiel aus der realen Welt:\
\ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs24 \cf0 {{\NeXTGraphic imgres.jpg \width5940 \height3400
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs32 \cf0 \
\pard\pardeftab720\sa240
\cf0 \
\
\pard\pardeftab720\sa240

\b\fs28 \cf0 \ul Bedingungen f\'fcr Deadlocks
\b0 \
\pard\pardeftab720

\fs26 \cf0 \ulnone Damit ein Deadlock entsteht, m\'fcssen alle vier folgenden Bedingungen erf\'fcllt sein:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls4\ilvl0\cf0 {\listtext	1.	}Wechselseitiger Ausschluss:\uc0\u8232 Jedes Betriebsmittel wird entweder von genau einem Prozess belegt oder es ist verf\'fcgbar. \
{\listtext	2.	}Anforderung weiterer Betriebsmittel:\uc0\u8232 Ein Prozess, der bereits Betriebsmittel belegt hat, kann weitere Betriebsmittel anfordern. \
{\listtext	3.	}Ununterbrechbarkeit:\uc0\u8232 Die von einem Prozess belegten Betriebsmittel k\'f6nnen nicht von au\'dfen entzogen werden; der Prozess selbst muss sie explizit freigeben. \
{\listtext	4.	}Zyklische Wartebedingung:\uc0\u8232 Es muss eine zyklische Kette von Prozessen geben, so dass jeder Prozess ein Betriebsmittel anfordert, dass vom n\'e4chsten Prozess der Kette belegt ist. 
\fs32 \
\pard\pardeftab720\sa240
\cf0 \
\
\pard\pardeftab720\sa240

\b\fs28 \cf0 \ul Strategien der Deadlock-Behandlung:\
\pard\pardeftab720

\b0\fs26 \cf0 \ulnone Durch geschickte Auswahl der Prozesse k\'f6nnen also Deadlock-Situationen behandelt werden. \
Man kann grunds\'e4tzlich vier Strategien unterscheiden:\
	1. Ignorieren des Problems (Strategie von Unix Systemen)\
	2. Erkennen und Beheben von Deadlocks\
	3. dynamische Verhinderung durch vorsichtige Betriebsmittelzuteilung\
	4. Vermeidung durch Verbieten einer der 4 notwendigen Bedingungen
\fs32 \
\pard\pardeftab720\sa240
\cf0 \
\
\
\pard\pardeftab720

\f0\fs24 \cf0 {{\NeXTGraphic page8image712.png \width15589 \height10812 \noorient
}¬}\pard\pardeftab720

\f3 \cf0 \
\
}